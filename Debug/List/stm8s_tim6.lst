###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM811/Mar/2019  20:52:12 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\lun55\Desktop\J19B_STM8\Lib\stm8s_tim6.c        #
#    Command line =  C:\Users\lun55\Desktop\J19B_STM8\Lib\stm8s_tim6.c -e     #
#                    -Ol --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_cross_call --debug --code_model small     #
#                    --data_model medium -o C:\Users\lun55\Desktop\J19B_STM8\ #
#                    Debug\Obj\ --dlib_config "D:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\stm8\LIB\dlstm8smf.h" -lcN                    #
#                    C:\Users\lun55\Desktop\J19B_STM8\Debug\List\ -lB         #
#                    C:\Users\lun55\Desktop\J19B_STM8\Debug\List\ --vregs 16  #
#    List file    =  C:\Users\lun55\Desktop\J19B_STM8\Debug\List\stm8s_tim6.l #
#                    st                                                       #
#    Object file  =  C:\Users\lun55\Desktop\J19B_STM8\Debug\Obj\stm8s_tim6.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\lun55\Desktop\J19B_STM8\Lib\stm8s_tim6.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_tim6.c
      4            * @author  MCD Application Team
      5            * @version V2.2.0
      6            * @date    30-September-2014
      7            * @brief   This file contains all the functions for the TIM6 peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm8s_tim6.h"
     31          
     32          /** @addtogroup STM8S_StdPeriph_Driver
     33            * @{
     34            */
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          
     38          
     39          /** @addtogroup STM8S_StdPeriph_Driver
     40            * @{
     41            */
     42          /* Private typedef -----------------------------------------------------------*/
     43          /* Private define ------------------------------------------------------------*/
     44          /* Private macro -------------------------------------------------------------*/
     45          /* Private variables ---------------------------------------------------------*/
     46          /* Private function prototypes -----------------------------------------------*/
     47          /**
     48            * @addtogroup TIM6_Public_Functions
     49            * @{
     50            */
     51          
     52          /**
     53            * @brief  Deinitializes the TIM6 peripheral registers to their default reset values.
     54            * @param  None
     55            * @retval None
     56            */
     57          void TIM6_DeInit(void)
     58          {
     59            TIM6->CR1 	= TIM6_CR1_RESET_VALUE;
     60            TIM6->CR2 	= TIM6_CR2_RESET_VALUE;
     61            TIM6->SMCR 	= TIM6_SMCR_RESET_VALUE;
     62            TIM6->IER 	= TIM6_IER_RESET_VALUE;
     63            TIM6->CNTR 	= TIM6_CNTR_RESET_VALUE;
     64            TIM6->PSCR	= TIM6_PSCR_RESET_VALUE;
     65            TIM6->ARR 	= TIM6_ARR_RESET_VALUE;
     66            TIM6->SR1 	= TIM6_SR1_RESET_VALUE;
     67          }
     68          
     69          /**
     70            * @brief  Initializes the TIM6 Time Base Unit according to the specified
     71            * parameters.
     72            * @param   TIM6_Prescaler : This parameter can be any of the @Ref TIM5_Prescaler_TypeDef enumeration.
     73            * @param   TIM6_Period : This parameter must be a value between 0x00 and 0xFF.
     74            * @retval None
     75            */
     76          void TIM6_TimeBaseInit(TIM6_Prescaler_TypeDef TIM6_Prescaler,
     77                                 uint8_t TIM6_Period)
     78          {
     79            /* Check TIM6 prescaler value */
     80            assert_param(IS_TIM6_PRESCALER_OK(TIM6_Prescaler));
     81            /* Set the Autoreload value */
     82            TIM6->ARR = (uint8_t)(TIM6_Period);
     83            /* Set the Prescaler value */
     84            TIM6->PSCR = (uint8_t)(TIM6_Prescaler);
     85          }
     86          
     87          /**
     88            * @brief  Enables or disables the TIM6 peripheral.
     89            * @param   NewState : The new state of the TIM6 peripheral.
     90            * This parameter can be any of the @ref FunctionalState enumeration.
     91            * @retval None
     92            */
     93          void TIM6_Cmd(FunctionalState NewState)
     94          {
     95            /* Check the parameters */
     96            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
     97            
     98            /* set or Reset the CEN Bit */
     99            if (NewState == ENABLE)
    100            {
    101              TIM6->CR1 |= TIM6_CR1_CEN ;
    102            }
    103            else
    104            {
    105              TIM6->CR1 &= (uint8_t)(~TIM6_CR1_CEN) ;
    106            }
    107          }
    108          
    109          /**
    110            * @brief  Enables or Disables the TIM6 Update event.
    111            * @param   NewState : The new state of the TIM6 peripheral Preload register.
    112            * This parameter can be any of the @ref FunctionalState enumeration.
    113            * @retval None
    114            */
    115          void TIM6_UpdateDisableConfig(FunctionalState NewState)
    116          {
    117            /* Check the parameters */
    118            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    119            
    120            /* Set or Reset the UDIS Bit */
    121            if (NewState == ENABLE)
    122            {
    123              TIM6->CR1 |= TIM6_CR1_UDIS ;
    124            }
    125            else
    126            {
    127              TIM6->CR1 &= (uint8_t)(~TIM6_CR1_UDIS) ;
    128            }
    129          }
    130          
    131          /**
    132            * @brief  Selects the TIM6 Update Request Interrupt source.
    133            * @param   TIM6_UpdateSource : Specifies the Update source.
    134            * This parameter can be one of the @ref TIM6_UpdateSource_TypeDef enumeration.
    135            * @retval None
    136            */
    137          void TIM6_UpdateRequestConfig(TIM6_UpdateSource_TypeDef TIM6_UpdateSource)
    138          {
    139            /* Check the parameters */
    140            assert_param(IS_TIM6_UPDATE_SOURCE_OK(TIM6_UpdateSource));
    141            
    142            /* Set or Reset the URS Bit */
    143            if (TIM6_UpdateSource == TIM6_UPDATESOURCE_REGULAR)
    144            {
    145              TIM6->CR1 |= TIM6_CR1_URS ;
    146            }
    147            else
    148            {
    149              TIM6->CR1 &= (uint8_t)(~TIM6_CR1_URS) ;
    150            }
    151          }
    152          
    153          /**
    154            * @brief  Selects the TIM6’s One Pulse Mode.
    155            * @param   TIM6_OPMode : Specifies the OPM Mode to be used.
    156            * This parameter can be one of the @ref TIM6_OPMode_TypeDef enumeration.
    157            * @retval None
    158            */
    159          void TIM6_SelectOnePulseMode(TIM6_OPMode_TypeDef TIM6_OPMode)
    160          {
    161            /* Check the parameters */
    162            assert_param(IS_TIM6_OPM_MODE_OK(TIM6_OPMode));
    163            
    164            /* Set or Reset the OPM Bit */
    165            if (TIM6_OPMode == TIM6_OPMODE_SINGLE)
    166            {
    167              TIM6->CR1 |= TIM6_CR1_OPM ;
    168            }
    169            else
    170            {
    171              TIM6->CR1 &= (uint8_t)(~TIM6_CR1_OPM) ;
    172            }
    173          }
    174          
    175          /**
    176            * @brief  Configures the TIM6 Prescaler.
    177            * @param   Prescaler : Specifies the Prescaler Register value
    178            * This parameter can be one of the @ref TIM6_Prescaler_TypeDef enumeration.
    179            * @param   TIM6_PSCReloadMode : Specifies the TIM6 Prescaler Reload mode.
    180            * This parameter can be one of the @ref TIM6_PSCReloadMode_TypeDef enumeration.
    181            * @retval None
    182            */
    183          void TIM6_PrescalerConfig(TIM6_Prescaler_TypeDef Prescaler,
    184                                    TIM6_PSCReloadMode_TypeDef TIM6_PSCReloadMode)
    185          {
    186            /* Check the parameters */
    187            assert_param(IS_TIM6_PRESCALER_RELOAD_OK(TIM6_PSCReloadMode));
    188            assert_param(IS_TIM6_PRESCALER_OK(Prescaler));
    189            
    190            /* Set the Prescaler value */
    191            TIM6->PSCR = (uint8_t)Prescaler;
    192            
    193            /* Set or reset the UG Bit */
    194            if (TIM6_PSCReloadMode == TIM6_PSCRELOADMODE_IMMEDIATE)
    195            {
    196              TIM6->EGR |= TIM6_EGR_UG ;
    197            }
    198            else
    199            {
    200              TIM6->EGR &= (uint8_t)(~TIM6_EGR_UG) ;
    201            }
    202          }
    203          
    204          /**
    205            * @brief  Enables or disables TIM6 peripheral Preload register on ARR.
    206            * @param   NewState : The new state of the TIM6 peripheral Preload register.
    207            * This parameter can be any of the @ref FunctionalState enumeration.
    208            * @retval None
    209            */
    210          void TIM6_ARRPreloadConfig(FunctionalState NewState)
    211          {
    212            /* Check the parameters */
    213            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    214            
    215            /* Set or Reset the ARPE Bit */
    216            if (NewState == ENABLE)
    217            {
    218              TIM6->CR1 |= TIM6_CR1_ARPE ;
    219            }
    220            else
    221            {
    222              TIM6->CR1 &= (uint8_t)(~TIM6_CR1_ARPE) ;
    223            }
    224          }
    225          
    226          /**
    227            * @brief  Sets the TIM6 Counter Register value.
    228            * @param   Counter : Specifies the Counter register new value.
    229            * This parameter is between 0x00 and 0xFF.
    230            * @retval None
    231            */
    232          void TIM6_SetCounter(uint8_t Counter)
    233          {
    234            /* Set the Counter Register value */
    235            TIM6->CNTR = (uint8_t)(Counter);
    236          }
    237          
    238          /**
    239            * @brief  Sets the TIM6 Autoreload Register value.
    240            * @param   Autoreload : Specifies the Autoreload register new value.
    241            * This parameter is between 0x00 and 0xFF.
    242            * @retval None
    243            */
    244          void TIM6_SetAutoreload(uint8_t Autoreload)
    245          {
    246            /* Set the Autoreload Register value */
    247            TIM6->ARR = (uint8_t)(Autoreload);
    248          }
    249          
    250          /**
    251            * @brief  Gets the TIM6 Counter value.
    252            * @param  None
    253            * @retval uint8_t: Counter Register value.
    254            */
    255          uint8_t TIM6_GetCounter(void)
    256          {
    257            uint8_t tmpcntr=0;
    258            tmpcntr = TIM6->CNTR;
    259            /* Get the Counter Register value */
    260            return ((uint8_t)tmpcntr);
    261          }
    262          
    263          /**
    264            * @brief  Gets the TIM6 Prescaler value.
    265            * @param  None
    266            * @retval TIM6_Prescaler_TypeDef : Prescaler Register configuration value.
    267            */
    268          TIM6_Prescaler_TypeDef TIM6_GetPrescaler(void)
    269          {
    270            /* Get the Prescaler Register value */
    271            return ((TIM6_Prescaler_TypeDef)TIM6->PSCR);
    272          }
    273          
    274          /**
    275            * @brief  Enables or disables the specified TIM6 interrupts.
    276            * @param   TIM6_IT : Specifies the TIM6 interrupts sources to be enabled or disabled.
    277            * This parameter can be any combination of the @ref TIM6_IT_TypeDef enumeration.
    278            * @param   NewState : The new state of the TIM6 peripheral.
    279            * This parameter can be any of the @ref FunctionalState enumeration.
    280            * @retval None
    281            * @par Required preconditions:
    282            * If QST option bit is enabled, the TIM6 Interrupt vector will be mapped on IRQ number 2 (irq0).
    283            * Otherwise, it will be mapped on IRQ number 27 (irq25).
    284            */
    285          void TIM6_ITConfig(TIM6_IT_TypeDef TIM6_IT, FunctionalState NewState)
    286          {
    287            /* Check the parameters */
    288            assert_param(IS_TIM6_IT_OK(TIM6_IT));
    289            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    290            
    291            if (NewState == ENABLE)
    292            {
    293              /* Enable the Interrupt sources */
    294              TIM6->IER |= (uint8_t)TIM6_IT;
    295            }
    296            else
    297            {
    298              /* Disable the Interrupt sources */
    299              TIM6->IER &= (uint8_t)(~(uint8_t)TIM6_IT);
    300            }
    301          }
    302          
    303          /**
    304            * @brief  Clears the TIM’s pending flags.
    305            * @param   TIM6_FLAG : Specifies the flag to clear.
    306            * This parameter can be one of the @ref TIM6_FLAG_TypeDef enumeration.
    307            * @retval None
    308            */
    309          void TIM6_ClearFlag(TIM6_FLAG_TypeDef TIM6_FLAG)
    310          {
    311            /* Check the parameters */
    312            assert_param(IS_TIM6_CLEAR_FLAG_OK((uint8_t)TIM6_FLAG));
    313            /* Clear the flags (rc_w0) clear this bit by writing 0. Writing ‘1’ has no effect*/
    314            TIM6->SR1 &= (uint8_t)(~((uint8_t)TIM6_FLAG));
    315          }
    316          
    317          /**
    318            * @brief  Checks whether the TIM6 interrupt has occurred or not.
    319            * @param   TIM6_IT : Specifies the TIM6 interrupt source to check.
    320            * This parameter can be one of the @ref TIM6_IT_TypeDef enumeration.
    321            * @retval ITStatus : The new state of the TIM6_IT.
    322            * This parameter can be any of the @ref ITStatus enumeration.
    323            */
    324          ITStatus TIM6_GetITStatus(TIM6_IT_TypeDef TIM6_IT)
    325          {
    326            ITStatus bitstatus = RESET;
    327            uint8_t itStatus = 0, itEnable = 0;
    328            
    329            /* Check the parameters */
    330            assert_param(IS_TIM6_GET_IT_OK(TIM6_IT));
    331            
    332            itStatus = (uint8_t)(TIM6->SR1 & (uint8_t)TIM6_IT);
    333            
    334            itEnable = (uint8_t)(TIM6->IER & (uint8_t)TIM6_IT);
    335            
    336            if ((itStatus != (uint8_t)RESET ) && (itEnable != (uint8_t)RESET ))
    337            {
    338              bitstatus = (ITStatus)SET;
    339            }
    340            else
    341            {
    342              bitstatus = (ITStatus)RESET;
    343            }
    344            return ((ITStatus)bitstatus);
    345          }
    346          
    347          /**
    348            * @brief  Configures the TIM6 event to be generated by software.
    349            * @param   TIM6_EventSource : Specifies the event source.
    350            * This parameter can be one of the @ref TIM6_EventSource_TypeDef enumeration.
    351            * @retval None
    352            */
    353          void TIM6_GenerateEvent(TIM6_EventSource_TypeDef TIM6_EventSource)
    354          {
    355            /* Check the parameters */
    356            assert_param(IS_TIM6_EVENT_SOURCE_OK((uint8_t)TIM6_EventSource));
    357            
    358            /* Set the event sources */
    359            TIM6->EGR |= (uint8_t)TIM6_EventSource;
    360          }
    361          
    362          /**
    363            * @brief  Checks whether the specified TIM6 flag is set or not.
    364            * @param   TIM6_FLAG : Specifies the flag to check.
    365            * This parameter can be one of the @ref TIM6_FLAG_TypeDef enumeration.
    366            * @retval FlagStatus : The new state of TIM6_FLAG.
    367            * This parameter can be any of the @ref FlagStatus enumeration.
    368            */
    369          FlagStatus TIM6_GetFlagStatus(TIM6_FLAG_TypeDef TIM6_FLAG)
    370          {
    371            volatile FlagStatus bitstatus = RESET;
    372            
    373            /* Check the parameters */
    374            assert_param(IS_TIM6_GET_FLAG_OK(TIM6_FLAG));
    375            
    376            if ((TIM6->SR1 & (uint8_t)TIM6_FLAG)  != 0)
    377            {
    378              bitstatus = SET;
    379            }
    380            else
    381            {
    382              bitstatus = RESET;
    383            }
    384            return ((FlagStatus)bitstatus);
    385          }
    386          
    387          /**
    388            * @brief  Clears the TIM6's interrupt pending bits.
    389            * @param   TIM6_IT : Specifies the pending bit to clear.
    390            * This parameter can be one of the @ref TIM6_IT_TypeDef enumeration.
    391            * @retval None
    392            */
    393          void TIM6_ClearITPendingBit(TIM6_IT_TypeDef TIM6_IT)
    394          {
    395            /* Check the parameters */
    396            assert_param(IS_TIM6_IT_OK(TIM6_IT));
    397            
    398            /* Clear the IT pending Bit */
    399            TIM6->SR1 &= (uint8_t)(~(uint8_t)TIM6_IT);
    400          }
    401          
    402          /**
    403            * @brief  Selects the TIM6 Trigger Output Mode.
    404            * @param   TIM6_TRGOSource : Specifies the Trigger Output source.
    405            * This parameter can be one of the @ref TIM6_TRGOSource_TypeDef enumeration.
    406            * @retval None
    407            */
    408          void TIM6_SelectOutputTrigger(TIM6_TRGOSource_TypeDef TIM6_TRGOSource)
    409          {
    410            uint8_t tmpcr2 = 0;
    411            
    412            /* Check the parameters */
    413            assert_param(IS_TIM6_TRGO_SOURCE_OK(TIM6_TRGOSource));
    414            
    415            tmpcr2 = TIM6->CR2;
    416            
    417            /* Reset the MMS Bits */
    418            tmpcr2 &= (uint8_t)(~TIM6_CR2_MMS);
    419            
    420            /* Select the TRGO source */
    421            tmpcr2 |=  (uint8_t)TIM6_TRGOSource;
    422            
    423            TIM6->CR2 = tmpcr2;
    424          }
    425          
    426          /**
    427            * @brief  Sets or Resets the TIM6 Master/Slave Mode.
    428            * @param   NewState : The new state of the synchronization between TIM6 and its slaves (through TRGO).
    429            * This parameter can be any of the @ref FunctionalState enumeration.
    430            * @retval None
    431            */
    432          
    433          void TIM6_SelectMasterSlaveMode(FunctionalState NewState)
    434          {
    435            /* Check the parameters */
    436            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    437            
    438            /* Set or Reset the MSM Bit */
    439            if (NewState == ENABLE)
    440            {
    441              TIM6->SMCR |= TIM6_SMCR_MSM;
    442            }
    443            else
    444            {
    445              TIM6->SMCR &= (uint8_t)(~TIM6_SMCR_MSM);
    446            }
    447          }
    448          
    449          /**
    450            * @brief  Selects the TIM6 Input Trigger source.
    451            * @param   TIM6_InputTriggerSource : Specifies Input Trigger source.
    452            * This parameter can be one of the @ref TIM6_TS_TypeDef enumeration.
    453            * @retval None
    454            */
    455          void TIM6_SelectInputTrigger(TIM6_TS_TypeDef TIM6_InputTriggerSource)
    456          {
    457            uint8_t tmpsmcr = 0;
    458            
    459            /* Check the parameters */
    460            assert_param(IS_TIM6_TRIGGER_SELECTION_OK(TIM6_InputTriggerSource));
    461            
    462            tmpsmcr = TIM6->SMCR;
    463            
    464            /* Select the Trigger Source */
    465            tmpsmcr &= (uint8_t)(~TIM6_SMCR_TS);
    466            tmpsmcr |= (uint8_t)TIM6_InputTriggerSource;
    467            
    468            TIM6->SMCR = (uint8_t)tmpsmcr;
    469          }
    470          
    471          /**
    472            * @brief  Enables the TIM6 internal Clock.
    473            * @param  None
    474            * @retval None
    475            */
    476          void TIM6_InternalClockConfig(void)
    477          {
    478            /* Disable slave mode to clock the prescaler directly with the internal clock */
    479            TIM6->SMCR &=  (uint8_t)(~TIM6_SMCR_SMS);
    480          }
    481          
    482          /**
    483            * @brief  Selects the TIM6 Slave Mode.
    484            * @param   TIM6_SlaveMode : Specifies the TIM6 Slave Mode.
    485            * This parameter can be one of the @ref TIM6_SlaveMode_TypeDef enumeration.
    486            * @retval None
    487            */
    488          void TIM6_SelectSlaveMode(TIM6_SlaveMode_TypeDef TIM6_SlaveMode)
    489          {
    490            uint8_t tmpsmcr = 0;
    491            
    492            /* Check the parameters */
    493            assert_param(IS_TIM6_SLAVE_MODE_OK(TIM6_SlaveMode));
    494            
    495            tmpsmcr = TIM6->SMCR;
    496            
    497            /* Reset the SMS Bits */
    498            tmpsmcr &= (uint8_t)(~TIM6_SMCR_SMS);
    499            
    500            /* Select the Slave Mode */
    501            tmpsmcr |= (uint8_t)TIM6_SlaveMode;
    502            
    503            TIM6->SMCR = tmpsmcr;
    504          }
    505          
    506          /**
    507            * @}
    508            */
    509            
    510          /**
    511            * @}
    512            */
    513            
    514          
    515          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

Errors: 30
Warnings: none
