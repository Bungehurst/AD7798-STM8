###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM829/May/2019  12:34:16 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c                   #
#    Command line =  E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c -e -Ol --no_cse   #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o E:\Desktop\J19B_4E\Debug\Obj\ --dlib_config    #
#                    "D:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0 Evaluation\stm8\LIB\dlstm8smf.h" -lcN                #
#                    E:\Desktop\J19B_4E\Debug\List\ -lB                       #
#                    E:\Desktop\J19B_4E\Debug\List\ -I                        #
#                    E:\Desktop\J19B_4E\Lib\inc\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\led\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\uart\ -I                          #
#                    E:\Desktop\J19B_4E\BSP\AD7798\ -I                        #
#                    E:\Desktop\J19B_4E\BSP\spi\ -I E:\Desktop\J19B_4E\USR\   #
#                    -I E:\Desktop\J19B_4E\BSP\delay\ -I                      #
#                    E:\Desktop\J19B_4E\BSP\tim1\ --vregs 16                  #
#    List file    =  E:\Desktop\J19B_4E\Debug\List\AD7798.lst                 #
#    Object file  =  E:\Desktop\J19B_4E\Debug\Obj\AD7798.o                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c
      1          /***************************************************************************//**
      2           *   @file   AD7798.c
      3           *   @brief  Implementation of AD7798 Driver.
      4           *   @author 
      5          ********************************************************************************
      6           * Copyright 2012(c) Analog Devices, Inc.
      7           *
      8           * All rights reserved.
      9          *******************************************************************************/
     10          
     11          /******************************************************************************/
     12          /* Include Files                                                              */
     13          /******************************************************************************/
     14          #include "AD7798.h"
     15          #include "spi.h"
     16          #include "main.h"
     17          /***************************************************************************//**
     18           * @brief Initializes the AD7799 and checks if the device is present.
     19           *
     20           * @param None.
     21           *
     22           * @return status - Result of the initialization procedure.
     23           *                  Example: 1 - if initialization was successful (ID is 0x0B).
     24           *                           0 - if initialization was unsuccessful.
     25          *******************************************************************************/
     26          unsigned char status = 0x1;
     27          void AD7798_Init(void)
     28          { 
     29            AD7798_Reset();
     30            Delay_ms(100);
     31            while(1)
     32            {
     33              if(((AD7798_GetRegisterValue(AD7798_REG_ID, 1) ) & 0x0F) == AD7798_ID)
     34              {
     35                status=0x1;
     36                break;
     37              }
     38            }
     39            if(status==0x1)
     40            {   
     41              AD7798_SetCodingMode(AD7798_BIPOLAR);
     42              AD7798_SetChannel(AD7798_CH_AIN1P_AIN1M);
     43              AD7798_SetReference(AD7798_REFDET_ENA);
     44              AD7798_SetGain(AD7798_GAIN_1);
     45              
     46              
     47              //AD7798_SetMode(AD7798_MODE_CAL_INT_ZERO);
     48              //Delay_ms(1000);
     49              AD7798_SetMode(AD7798_MODE_CONT);
     50            }
     51          }
     52          
     53          /***************************************************************************//**
     54           * @brief Sends 32 consecutive 1's on SPI in order to reset the part.
     55           *
     56           * @param None.
     57           *
     58           * @return  None.    
     59          *******************************************************************************/
     60          void AD7798_Reset(void)
     61          {
     62            u8 dataToSend[5] = {0x03, 0xff, 0xff, 0xff, 0xff};	
     63            SPI_Write(dataToSend,5);
     64          }
     65          /***************************************************************************//**
     66           * @brief Reads the value of the selected register
     67           *
     68           * @param regAddress - The address of the register to read.
     69           * @param size - The size of the register to read.
     70           *
     71           * @return data - The value of the selected register register.
     72          *******************************************************************************/
     73          unsigned long AD7798_GetRegisterValue(unsigned char regAddress, unsigned char size)
     74          {
     75              u32 receivedData = 0x00;	
     76              u8 data[5] = {0x03, 0x00, 0x00, 0x00, 0x00};
     77              data[1] = AD7798_COMM_READ |  AD7798_COMM_ADDR(regAddress); 
     78              AD7798_CS_LOW;
     79              SPI_Write(data,2);
     80              //WaitRDY();
     81              SPI_Read(data,size);
     82              AD7798_CS_HIGH;
     83              if(size == 1)
     84              {
     85                receivedData += (data[0] << 0);
     86              }
     87              else if(size == 2)
     88              {
     89                receivedData += (data[0] << 8);
     90                receivedData += (data[1] << 0);
     91              }
     92              else if(size == 3)
     93              {
     94                receivedData += (data[0] << 16);
     95                receivedData += (data[1] << 8);
     96                receivedData += (data[2] << 0);
     97              }
     98              return receivedData;
     99          }
    100          /***************************************************************************//**
    101           * @brief Writes the value to the register
    102           *
    103           * @param -  regAddress - The address of the register to write to.
    104           * @param -  regValue - The value to write to the register.
    105           * @param -  size - The size of the register to write.
    106           *
    107           * @return  None.    
    108          *******************************************************************************/
    109          void AD7798_SetRegisterValue(unsigned char regAddress,
    110                                       unsigned long regValue, 
    111                                       unsigned char size)
    112          {
    113              u8 data[5] = {0x03, 0x00, 0x00, 0x00, 0x00};	
    114              data[1] = AD7798_COMM_WRITE |  AD7798_COMM_ADDR(regAddress);
    115              if(size == 1)
    116              {
    117                  data[2] = (unsigned char)regValue;
    118              }
    119              if(size == 2)
    120              {
    121          	data[3] = (unsigned char)((regValue & 0x0000FF) >> 0);
    122                  data[2] = (unsigned char)((regValue & 0x00FF00) >> 8);
    123              }
    124              if(size == 3)
    125              {
    126          	data[4] = (unsigned char)((regValue & 0x0000FF) >> 0);
    127          	data[3] = (unsigned char)((regValue & 0x00FF00) >> 8);
    128                  data[2] = (unsigned char)((regValue & 0xFF0000) >> 16);
    129              }
    130              SPI_Write(data,(1 + size));
    131          }
    132          /***************************************************************************//**
    133           * @brief Reads /RDY bit of status reg.
    134           *
    135           * @param None.
    136           *
    137           * @return rdy	- 0 if RDY is 1.
    138           *              - 1 if RDY is 0.
    139          *******************************************************************************/
    140          unsigned char AD7798_Ready(void)
    141          {
    142              u8 rdy = 0;
    143              rdy = (AD7798_GetRegisterValue(AD7798_REG_STAT,1) & 0x80);   
    144              return(!rdy);
    145          }
    146          
    147          /***************************************************************************//**
    148           * @brief Sets the operating mode of AD7799.
    149           *
    150           * @param mode - Mode of operation.
    151           *
    152           * @return  None.    
    153          *******************************************************************************/
    154          void AD7798_SetMode(unsigned long mode)
    155          {
    156              unsigned long command;
    157              command = AD7798_GetRegisterValue(AD7798_REG_MODE,2);
    158              command &= ~AD7798_MODE_SEL(0xFF);
    159              command |= AD7798_MODE_SEL(mode);
    160              AD7798_SetRegisterValue(AD7798_REG_MODE,command,2);
    161          }
    162          /***************************************************************************//**
    163           * @brief Selects the channel of AD7799.
    164           *
    165           * @param  channel - ADC channel selection.
    166           *
    167           * @return  None.    
    168          *******************************************************************************/
    169          void AD7798_SetChannel(unsigned long channel)
    170          {
    171              unsigned long command;
    172              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    173              command &= ~AD7798_CONF_CHAN(0xFF);
    174              command |= AD7798_CONF_CHAN(channel);
    175              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    176          }
    177          
    178          /***************************************************************************//**
    179           * @brief  Sets the gain of the In-Amp.
    180           *
    181           * @param  gain - Gain.
    182           *
    183           * @return  None.    
    184          *******************************************************************************/
    185          void AD7798_SetGain(unsigned long gain)
    186          {
    187              unsigned long command;
    188              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    189              command &= ~AD7798_CONF_GAIN(0xFF);
    190              command |= AD7798_CONF_GAIN(gain);
    191              AD7798_SetRegisterValue(AD7798_REG_CONF, command,2);
    192          }
    193          /***************************************************************************//**
    194           * @brief Enables or disables the reference detect function.
    195           *
    196           * @param state - State of the reference detect function.
    197           *               Example: 0	- Reference detect disabled.
    198           *                        1	- Reference detect enabled.
    199           *
    200           * @return None.    
    201          *******************************************************************************/
    202          void AD7798_SetReference(unsigned char state)
    203          {
    204              unsigned long command = 0;
    205              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    206              command &= ~AD7798_CONF_REFDET(1);
    207              command |= AD7798_CONF_REFDET(state);
    208              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    209          }
    210          
    211          void AD7798_SetCodingMode(unsigned char  mode)
    212          {
    213              unsigned long command = 0;
    214              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    215              if(mode == AD7798_BIPOLAR)
    216                command &= ~AD7798_CONF_UNIPOLAR;
    217              if(mode == AD7798_UNIPOLAR)
    218              command |= AD7798_CONF_UNIPOLAR;
    219              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    220          }

   Section sizes:

     Function/Label                      Bytes
     --------------                      -----
     status                                 1
     AD7798_Init                           72
     AD7798_Reset                          29
     AD7798_GetRegisterValue              201
     AD7798_SetRegisterValue               94
     AD7798_Ready                          32
     AD7798_SetMode                        80
     AD7798_SetChannel                     77
     AD7798_SetGain                        81
     AD7798_SetReference                   88
     AD7798_SetCodingMode                  90
     ?<Constant {3, 255, 255, 255, 255}>    5
     ?<Constant {3, 0, 0, 0, 0}>            5
     ?<Constant {3, 0, 0, 0, 0}>_1          5

 
   1 byte  in section .near.data
  15 bytes in section .near.rodata
 844 bytes in section .near_func.text
 
 844 bytes of CODE  memory
  15 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: 1
