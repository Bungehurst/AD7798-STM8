###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM831/May/2019  19:47:09 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c                   #
#    Command line =  E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c -e -Ol --no_cse   #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o E:\Desktop\J19B_4E\Debug\Obj\ --dlib_config    #
#                    "D:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0 Evaluation\stm8\LIB\dlstm8smf.h" -lcN                #
#                    E:\Desktop\J19B_4E\Debug\List\ -lB                       #
#                    E:\Desktop\J19B_4E\Debug\List\ -I                        #
#                    E:\Desktop\J19B_4E\Lib\inc\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\led\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\uart\ -I                          #
#                    E:\Desktop\J19B_4E\BSP\AD7798\ -I                        #
#                    E:\Desktop\J19B_4E\BSP\spi\ -I E:\Desktop\J19B_4E\USR\   #
#                    -I E:\Desktop\J19B_4E\BSP\delay\ -I                      #
#                    E:\Desktop\J19B_4E\BSP\tim1\ --vregs 16                  #
#    List file    =  E:\Desktop\J19B_4E\Debug\List\AD7798.lst                 #
#    Object file  =  E:\Desktop\J19B_4E\Debug\Obj\AD7798.o                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\Desktop\J19B_4E\BSP\AD7798\AD7798.c
      1          /***************************************************************************//**
      2           *   @file   AD7798.c
      3           *   @brief  Implementation of AD7798 Driver.
      4           *   @author 
      5          ********************************************************************************
      6           * Copyright 2012(c) Analog Devices, Inc.
      7           *
      8           * All rights reserved.
      9          *******************************************************************************/
     10          
     11          /******************************************************************************/
     12          /* Include Files                                                              */
     13          /******************************************************************************/
     14          #include "AD7798.h"
     15          #include "spi.h"
     16          #include "main.h"
     17          /***************************************************************************//**
     18           * @brief Initializes the AD7799 and checks if the device is present.
     19           *
     20           * @param None.
     21           *
     22           * @return status - Result of the initialization procedure.
     23           *                  Example: 1 - if initialization was successful (ID is 0x0B).
     24           *                           0 - if initialization was unsuccessful.
     25          *******************************************************************************/
     26          unsigned char status = 0x1;
     27          void AD7798_Init(void)
     28          { 
     29            AD7798_Reset();
     30            Delay_ms(1000);
     31            while(1)
     32            {
     33              if(((AD7798_GetRegisterValue(AD7798_REG_ID, 1) ) & 0x0F) == AD7798_ID)
     34              {
     35                status=0x1;
     36                break;
     37              }
     38            }
     39            if(status==0x1)
     40            {   
     41              AD7798_SetCodingMode(AD7798_BIPOLAR);
     42              AD7798_SetChannel(AD7798_CH_AIN1P_AIN1M);
     43              AD7798_SetReference(AD7798_REFDET_ENA);
     44              AD7798_SetGain(AD7798_GAIN_1);
     45              
     46              AD7798_SetMode(AD7798_MODE_CAL_SYS_ZERO);
     47              Delay_ms(1000);
     48              AD7798_SetMode(AD7798_MODE_SINGLE);
     49            }
     50          }
     51          
     52          /***************************************************************************//**
     53           * @brief Sends 32 consecutive 1's on SPI in order to reset the part.
     54           *
     55           * @param None.
     56           *
     57           * @return  None.    
     58          *******************************************************************************/
     59          void AD7798_Reset(void)
     60          {
     61            u8 dataToSend[5] = {0x03, 0xff, 0xff, 0xff, 0xff};	
     62            AD7798_CS_LOW;
     63            Delay_10us();
     64            SPI_Write(dataToSend,5);
     65            AD7798_CS_HIGH;
     66          }
     67          /***************************************************************************//**
     68           * @brief Reads the value of the selected register
     69           *
     70           * @param regAddress - The address of the register to read.
     71           * @param size - The size of the register to read.
     72           *
     73           * @return data - The value of the selected register register.
     74          *******************************************************************************/
     75          u32 AD7798_GetRegisterValue(unsigned char regAddress, unsigned char size)
     76          {
     77              u32 receivedData = 0x00000000;	
     78              u8 data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
     79              data[1] = AD7798_COMM_READ |  AD7798_COMM_ADDR(regAddress); 
     80              AD7798_CS_LOW;
     81              asm("nop");
     82              SPI_Write(data,2);
     83              SPI_Read(data,size);
     84              AD7798_CS_HIGH;
     85              if(size == 1)
     86              {
     87                receivedData += (data[0] << 0);
     88              }
     89              else if(size == 2)
     90              {
     91                receivedData += (data[0] << 8);
     92                receivedData += (data[1] << 0);
     93              }
     94              else if(size == 3)
     95              {
     96                receivedData += (data[0] *65536);
     97                receivedData += (data[1] << 8);
     98                receivedData += (data[2] << 0);
     99              }
    100              return receivedData;
    101          }
    102          /***************************************************************************//**
    103           * @brief Writes the value to the register
    104           *
    105           * @param -  regAddress - The address of the register to write to.
    106           * @param -  regValue - The value to write to the register.
    107           * @param -  size - The size of the register to write.
    108           *
    109           * @return  None.    
    110          *******************************************************************************/
    111          void AD7798_SetRegisterValue(unsigned char regAddress,
    112                                       unsigned long regValue, 
    113                                       unsigned char size)
    114          {
    115              u8 data[5] = {0x03, 0x00, 0x00, 0x00, 0x00};	
    116              data[1] = AD7798_COMM_WRITE |  AD7798_COMM_ADDR(regAddress);
    117              if(size == 1)
    118              {
    119                  data[2] = (unsigned char)regValue;
    120              }
    121              if(size == 2)
    122              {
    123          	data[3] = (unsigned char)((regValue & 0x0000FF) >> 0);
    124                  data[2] = (unsigned char)((regValue & 0x00FF00) >> 8);
    125              }
    126              if(size == 3)
    127              {
    128          	data[4] = (unsigned char)((regValue & 0x0000FF) >> 0);
    129          	data[3] = (unsigned char)((regValue & 0x00FF00) >> 8);
    130                  data[2] = (unsigned char)((regValue & 0xFF0000) >> 16);
    131              }
    132              AD7798_CS_LOW;
    133              Delay_10us();
    134              SPI_Write(data,(1 + size));
    135              AD7798_CS_HIGH;
    136          }
    137          /***************************************************************************//**
    138           * @brief Reads /RDY bit of status reg.
    139           *
    140           * @param None.
    141           *
    142           * @return rdy	- 0 if RDY is 1.
    143           *              - 1 if RDY is 0.
    144          *******************************************************************************/
    145          unsigned char AD7798_Ready(void)
    146          {
    147              u8 rdy = 0;
    148              rdy = (AD7798_GetRegisterValue(AD7798_REG_STAT,1) & 0x80);   
    149              return(!rdy);
    150          }
    151          
    152          /***************************************************************************//**
    153           * @brief Sets the operating mode of AD7799.
    154           *
    155           * @param mode - Mode of operation.
    156           *
    157           * @return  None.    
    158          *******************************************************************************/
    159          void AD7798_SetMode(unsigned long mode)
    160          {
    161              unsigned long command;
    162              command = AD7798_GetRegisterValue(AD7798_REG_MODE,2);
    163              command &= ~AD7798_MODE_SEL(0xFF);
    164              command |= AD7798_MODE_SEL(mode);
    165              AD7798_SetRegisterValue(AD7798_REG_MODE,command,2);
    166          }
    167          /***************************************************************************//**
    168           * @brief Selects the channel of AD7799.
    169           *
    170           * @param  channel - ADC channel selection.
    171           *
    172           * @return  None.    
    173          *******************************************************************************/
    174          void AD7798_SetChannel(unsigned long channel)
    175          {
    176              unsigned long command;
    177              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    178              command &= ~AD7798_CONF_CHAN(0xFF);
    179              command |= AD7798_CONF_CHAN(channel);
    180              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    181          }
    182          
    183          /***************************************************************************//**
    184           * @brief  Sets the gain of the In-Amp.
    185           *
    186           * @param  gain - Gain.
    187           *
    188           * @return  None.    
    189          *******************************************************************************/
    190          void AD7798_SetGain(unsigned long gain)
    191          {
    192              unsigned long command;
    193              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    194              command &= ~AD7798_CONF_GAIN(0xFF);
    195              command |= AD7798_CONF_GAIN(gain);
    196              AD7798_SetRegisterValue(AD7798_REG_CONF, command,2);
    197          }
    198          /***************************************************************************//**
    199           * @brief Enables or disables the reference detect function.
    200           *
    201           * @param state - State of the reference detect function.
    202           *               Example: 0	- Reference detect disabled.
    203           *                        1	- Reference detect enabled.
    204           *
    205           * @return None.    
    206          *******************************************************************************/
    207          void AD7798_SetReference(unsigned char state)
    208          {
    209              unsigned long command = 0;
    210              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    211              command &= ~AD7798_CONF_REFDET(1);
    212              command |= AD7798_CONF_REFDET(state);
    213              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    214          }
    215          
    216          void AD7798_SetCodingMode(unsigned char  mode)
    217          {
    218              unsigned long command = 0;
    219              command = AD7798_GetRegisterValue(AD7798_REG_CONF,2);
    220              if(mode == AD7798_BIPOLAR)
    221                command &= ~AD7798_CONF_UNIPOLAR;
    222              if(mode == AD7798_UNIPOLAR)
    223              command |= AD7798_CONF_UNIPOLAR;
    224              AD7798_SetRegisterValue(AD7798_REG_CONF,command,2);
    225          }

   Section sizes:

     Function/Label                      Bytes
     --------------                      -----
     status                                 1
     AD7798_Init                           90
     AD7798_Reset                          48
     AD7798_GetRegisterValue              227
     AD7798_SetRegisterValue              122
     AD7798_Ready                          32
     AD7798_SetMode                        80
     AD7798_SetChannel                     77
     AD7798_SetGain                        81
     AD7798_SetReference                   88
     AD7798_SetCodingMode                  90
     ?<Constant {3, 255, 255, 255, 255}>    5
     ?<Constant {0, 0, 0, 0, 0}>            5
     ?<Constant {3, 0, 0, 0, 0}>            5

 
   1 byte  in section .near.data
  15 bytes in section .near.rodata
 935 bytes in section .near_func.text
 
 935 bytes of CODE  memory
  15 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
