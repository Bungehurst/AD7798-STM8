###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM831/May/2019  19:48:05 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\Desktop\J19B_4E\USR\stm8s_it.c                        #
#    Command line =  E:\Desktop\J19B_4E\USR\stm8s_it.c -e -Ol --no_cse        #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o E:\Desktop\J19B_4E\Debug\Obj\ --dlib_config    #
#                    "D:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0 Evaluation\stm8\LIB\dlstm8smf.h" -lcN                #
#                    E:\Desktop\J19B_4E\Debug\List\ -lB                       #
#                    E:\Desktop\J19B_4E\Debug\List\ -I                        #
#                    E:\Desktop\J19B_4E\Lib\inc\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\led\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\uart\ -I                          #
#                    E:\Desktop\J19B_4E\BSP\AD7798\ -I                        #
#                    E:\Desktop\J19B_4E\BSP\spi\ -I E:\Desktop\J19B_4E\USR\   #
#                    -I E:\Desktop\J19B_4E\BSP\delay\ -I                      #
#                    E:\Desktop\J19B_4E\BSP\tim1\ --vregs 16                  #
#    List file    =  E:\Desktop\J19B_4E\Debug\List\stm8s_it.lst               #
#    Object file  =  E:\Desktop\J19B_4E\Debug\Obj\stm8s_it.o                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\Desktop\J19B_4E\USR\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_it.c
      4            * @author  MCD Application Team
      5            * @version V2.2.0
      6            * @date    30-September-2014
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all peripherals interrupt service 
      9            *          routine.
     10             ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */ 
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm8s_it.h"
     32          #include "main.h"
     33          #define abs(x) ((x>0)?(x):(-x))
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          int is_rev_flag = 0;
     38          int rev_num = 0;
     39          uint8_t rx_buf[10];
     40          uint8_t tx_buf[10];
     41          int i = 0;
     42          #ifdef _COSMIC_
     43          /**
     44            * @brief Dummy Interrupt routine
     45            * @par Parameters:
     46            * None
     47            * @retval
     48            * None
     49          */
     50          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     51          {
     52            /* In order to detect unexpected events during development,
     53               it is recommended to set a breakpoint on the following instruction.
     54            */
     55          }
     56          #endif /*_COSMIC_*/
     57          
     58          /**
     59            * @brief TRAP Interrupt routine
     60            * @param  None
     61            * @retval None
     62            */
     63          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     64          {
     65            /* In order to detect unexpected events during development,
     66               it is recommended to set a breakpoint on the following instruction.
     67            */
     68          }
     69          
     70          /**
     71            * @brief Top Level Interrupt routine.
     72            * @param  None
     73            * @retval None
     74            */
     75          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     76          
     77          {
     78            /* In order to detect unexpected events during development,
     79               it is recommended to set a breakpoint on the following instruction.
     80            */
     81          }
     82          
     83          /**
     84            * @brief Auto Wake Up Interrupt routine.
     85            * @param  None
     86            * @retval None
     87            */
     88          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     89          {
     90            /* In order to detect unexpected events during development,
     91               it is recommended to set a breakpoint on the following instruction.
     92            */
     93          }
     94          
     95          /**
     96            * @brief Clock Controller Interrupt routine.
     97            * @param  None
     98            * @retval None
     99            */
    100          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    101          {
    102            /* In order to detect unexpected events during development,
    103               it is recommended to set a breakpoint on the following instruction.
    104            */
    105          }
    106          
    107          /**
    108            * @brief External Interrupt PORTA Interrupt routine.
    109            * @param  None
    110            * @retval None
    111            */
    112          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    113          {
    114            /* In order to detect unexpected events during development,
    115               it is recommended to set a breakpoint on the following instruction.
    116            */
    117          }
    118          
    119          /**
    120            * @brief External Interrupt PORTB Interrupt routine.
    121            * @param  None
    122            * @retval None
    123            */
    124          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    125          {
    126            /* In order to detect unexpected events during development,
    127               it is recommended to set a breakpoint on the following instruction.
    128            */
    129          }
    130          
    131          /**
    132            * @brief External Interrupt PORTC Interrupt routine.
    133            * @param  None
    134            * @retval None
    135            */
    136          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    137          {
    138            /* In order to detect unexpected events during development,
    139               it is recommended to set a breakpoint on the following instruction.
    140            */
    141          }
    142          
    143          /**
    144            * @brief External Interrupt PORTD Interrupt routine.
    145            * @param  None
    146            * @retval None
    147            */
    148          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    149          {
    150            /* In order to detect unexpected events during development,
    151               it is recommended to set a breakpoint on the following instruction.
    152            */
    153          }
    154          
    155          /**
    156            * @brief External Interrupt PORTE Interrupt routine.
    157            * @param  None
    158            * @retval None
    159            */
    160          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    161          {
    162            /* In order to detect unexpected events during development,
    163               it is recommended to set a breakpoint on the following instruction.
    164            */
    165          }
    166          
    167          #if defined (STM8S903) || defined (STM8AF622x) 
    168          /**
    169            * @brief External Interrupt PORTF Interrupt routine.
    170            * @param  None
    171            * @retval None
    172            */
    173           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    174           {
    175            /* In order to detect unexpected events during development,
    176               it is recommended to set a breakpoint on the following instruction.
    177            */
    178           }
    179          #endif /* (STM8S903) || (STM8AF622x) */
    180          
    181          #if defined (STM8S208) || defined (STM8AF52Ax)
    182          /**
    183            * @brief CAN RX Interrupt routine.
    184            * @param  None
    185            * @retval None
    186            */
    187           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    188           {
    189            /* In order to detect unexpected events during development,
    190               it is recommended to set a breakpoint on the following instruction.
    191            */
    192           }
    193          
    194          /**
    195            * @brief CAN TX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    200           {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204           }
    205          #endif /* (STM8S208) || (STM8AF52Ax) */
    206          
    207          /**
    208            * @brief SPI Interrupt routine.
    209            * @param  None
    210            * @retval None
    211            */
    212          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    213          {
    214            /* In order to detect unexpected events during development,
    215               it is recommended to set a breakpoint on the following instruction.
    216            */
    217          }
    218          
    219          /**
    220            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    221            * @param  None
    222            * @retval None
    223            */
    224          u32 raw_data;
    225          double ad_data;
    226          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    227          {
    228            GPIO_WriteReverse(GPIOB,(GPIO_Pin_TypeDef)GPIO_PIN_5);
    229            TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
    230            AD7798_SetMode(AD7798_MODE_SINGLE);
    231            Delay_ms(100);
    232            if (AD7798_Ready())
    233            {
    234              raw_data = AD7798_GetRegisterValue(AD7798_REG_DATA,3);
    235              ad_data = ((raw_data)/8388608.0 - 1.0)*2.49;
    236            }
    237              ad_data = abs(ad_data);
    238              int sum = 0;
    239              tx_buf[0] = 0x5A;
    240              tx_buf[1] = 0xA5;
    241              tx_buf[2] = 0x06;
    242              tx_buf[3] = 0xAA;
    243              tx_buf[4] = 0x02;
    244              tx_buf[5] = (uint8_t)(((uint16_t)(ad_data*1000))>>8 & 0xFF);
    245              tx_buf[6] = (uint8_t)(((uint16_t)(ad_data*1000)) & 0xFF);
    246              sum = tx_buf[5]+tx_buf[6];
    247              tx_buf[7] = sum&0xFF;
    248              tx_buf[8] = 0xFF;
    249              tx_buf[9] = 0xFE;
    250              i = 0;
    251              GPIO_WriteHigh(GPIOA,(GPIO_Pin_TypeDef)GPIO_PIN_1);
    252              Delay_ms(100);
    253              UART1_ITConfig(UART1_IT_TXE, ENABLE);
    254              TIM1_ITConfig(TIM1_IT_UPDATE, DISABLE);
    255          }
    256          
    257          /**
    258            * @brief Timer1 Capture/Compare Interrupt routine.
    259            * @param  None
    260            * @retval None
    261            */
    262          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    263          {
    264            /* In order to detect unexpected events during development,
    265               it is recommended to set a breakpoint on the following instruction.
    266            */
    267          }
    268          
    269          #if defined (STM8S903) || defined (STM8AF622x)
    270          /**
    271            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    272            * @param  None
    273            * @retval None
    274            */
    275           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    276           {
    277            /* In order to detect unexpected events during development,
    278               it is recommended to set a breakpoint on the following instruction.
    279            */
    280           }
    281           
    282          /**
    283            * @brief Timer5 Capture/Compare Interrupt routine.
    284            * @param  None
    285            * @retval None
    286            */
    287           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    288           {
    289            /* In order to detect unexpected events during development,
    290               it is recommended to set a breakpoint on the following instruction.
    291            */
    292           }
    293          
    294          #else /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8S103) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    295          /**
    296            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    297            * @param  None
    298            * @retval None
    299            */
    300           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    301           {
    302            /* In order to detect unexpected events during development,
    303               it is recommended to set a breakpoint on the following instruction.
    304            */
    305           }
    306          
    307          /**
    308            * @brief Timer2 Capture/Compare Interrupt routine.
    309            * @param  None
    310            * @retval None
    311            */
    312           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    313           {
    314            /* In order to detect unexpected events during development,
    315               it is recommended to set a breakpoint on the following instruction.
    316            */
    317           }
    318          #endif /* (STM8S903) || (STM8AF622x) */
    319          
    320          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    321              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    322          /**
    323            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    324            * @param  None
    325            * @retval None
    326            */
    327           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    328           {
    329            /* In order to detect unexpected events during development,
    330               it is recommended to set a breakpoint on the following instruction.
    331            */
    332           }
    333          
    334          /**
    335            * @brief Timer3 Capture/Compare Interrupt routine.
    336            * @param  None
    337            * @retval None
    338            */
    339           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    340           {
    341            /* In order to detect unexpected events during development,
    342               it is recommended to set a breakpoint on the following instruction.
    343            */
    344           }
    345          #endif /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    346          
    347          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    348              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    349          /**
    350            * @brief UART1 TX Interrupt routine.
    351            * @param  None
    352            * @retval None
    353            */
    354          int j = 0;
    355           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    356           {
    357             if(j<10) UART1_SendData8(tx_buf[j++]);
    358             else 
    359             {
    360                GPIO_WriteLow(GPIOA,(GPIO_Pin_TypeDef)GPIO_PIN_1);
    361                UART1_ITConfig(UART1_IT_TXE, DISABLE);
    362                j = 0;
    363             }  
    364           }
    365          int sum = 0;
    366          
    367          /**
    368            * @brief UART1 RX Interrupt routine.
    369            * @param  None
    370            * @retval None
    371            */
    372           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    373           {
    374             char RxBuf;
    375             if(UART1_GetFlagStatus(UART1_FLAG_RXNE) != RESET)
    376             {
    377              UART1_ClearITPendingBit(UART1_IT_RXNE); 
    378              RxBuf = UART1_ReceiveData8();
    379              if(RxBuf == 0x5A && is_rev_flag == 0)
    380              {
    381                is_rev_flag = 1;
    382                return;
    383              }
    384              else if(is_rev_flag == 1 && RxBuf == 0xA5)
    385              {
    386                is_rev_flag = 2;
    387                return ;
    388              }
    389              else if(is_rev_flag == 2 && RxBuf == 0x06)
    390              { 
    391                 sum += RxBuf;
    392                 is_rev_flag = 3;
    393                 return;
    394              }
    395              else if(is_rev_flag == 3 && RxBuf == 0xAA)
    396              {
    397                sum += RxBuf;
    398                is_rev_flag = 4;
    399                return;
    400              }
    401              else if(is_rev_flag == 4)
    402              {
    403                if(sum == RxBuf)
    404                {
    405                  sum = 0;
    406                  is_rev_flag = 0;
    407                  TIM1_ITConfig(TIM1_IT_UPDATE, ENABLE); 
    408                  return;
    409                }else
    410                {
    411                  sum = 0;
    412                  is_rev_flag = 0;
    413                  return;
    414                }
    415              }else
    416              {
    417                sum = 0;
    418                is_rev_flag = 0;
    419                return ;
    420              }
    421             }
    422             if(UART1->SR & UART1_SR_OR)
    423             {
    424                (void)UART1->SR;
    425                (void)UART1->DR;
    426                 UART1_ClearITPendingBit(UART1_IT_OR); 
    427             }	
    428              return ;
    429           }
    430          #endif /* (STM8S208) || (STM8S207) || (STM8S103) || (STM8S903) || (STM8AF62Ax) || (STM8AF52Ax) */
    431          
    432          #if defined(STM8AF622x)
    433          /**
    434            * @brief UART4 TX Interrupt routine.
    435            * @param  None
    436            * @retval None
    437            */
    438           INTERRUPT_HANDLER(UART4_TX_IRQHandler, 17)
    439           {
    440              /* In order to detect unexpected events during development,
    441                 it is recommended to set a breakpoint on the following instruction.
    442              */
    443           }
    444          
    445          /**
    446            * @brief UART4 RX Interrupt routine.
    447            * @param  None
    448            * @retval None
    449            */
    450           INTERRUPT_HANDLER(UART4_RX_IRQHandler, 18)
    451           {
    452              /* In order to detect unexpected events during development,
    453                 it is recommended to set a breakpoint on the following instruction.
    454              */
    455           }
    456          #endif /* (STM8AF622x) */
    457          
    458          /**
    459            * @brief I2C Interrupt routine.
    460            * @param  None
    461            * @retval None
    462            */
    463          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    464          {
    465            /* In order to detect unexpected events during development,
    466               it is recommended to set a breakpoint on the following instruction.
    467            */
    468          }
    469          
    470          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    471          /**
    472            * @brief UART2 TX interrupt routine.
    473            * @param  None
    474            * @retval None
    475            */
    476           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    477           {
    478              /* In order to detect unexpected events during development,
    479                 it is recommended to set a breakpoint on the following instruction.
    480              */
    481           }
    482          
    483          /**
    484            * @brief UART2 RX interrupt routine.
    485            * @param  None
    486            * @retval None
    487            */
    488           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    489           {
    490              /* In order to detect unexpected events during development,
    491                 it is recommended to set a breakpoint on the following instruction.
    492              */
    493           }
    494          #endif /* (STM8S105) || (STM8AF626x) */
    495          
    496          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    497          /**
    498            * @brief UART3 TX interrupt routine.
    499            * @param  None
    500            * @retval None
    501            */
    502           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    503           {
    504              /* In order to detect unexpected events during development,
    505                 it is recommended to set a breakpoint on the following instruction.
    506              */
    507           }
    508          
    509          /**
    510            * @brief UART3 RX interrupt routine.
    511            * @param  None
    512            * @retval None
    513            */
    514           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    515           {
    516              /* In order to detect unexpected events during development,
    517                 it is recommended to set a breakpoint on the following instruction.
    518              */
    519           }
    520          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    521          
    522          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    523          /**
    524            * @brief ADC2 interrupt routine.
    525            * @param  None
    526            * @retval None
    527            */
    528           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    529           {
    530              /* In order to detect unexpected events during development,
    531                 it is recommended to set a breakpoint on the following instruction.
    532              */
    533           }
    534          #else /* STM8S105 or STM8S103 or STM8S903 or STM8AF626x or STM8AF622x */
    535          /**
    536            * @brief ADC1 interrupt routine.
    537            * @par Parameters:
    538            * None
    539            * @retval 
    540            * None
    541            */
    542           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    543           {
    544              /* In order to detect unexpected events during development,
    545                 it is recommended to set a breakpoint on the following instruction.
    546              */
    547           }
    548          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    549          
    550          #if defined (STM8S903) || defined (STM8AF622x)
    551          /**
    552            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    553            * @param  None
    554            * @retval None
    555            */
    556          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    557           {
    558            /* In order to detect unexpected events during development,
    559               it is recommended to set a breakpoint on the following instruction.
    560            */
    561           }
    562          #else /* STM8S208 or STM8S207 or STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    563          /**
    564            * @brief Timer4 Update/Overflow Interrupt routine.
    565            * @param  None
    566            * @retval None
    567            */
    568           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    569           {
    570            /* In order to detect unexpected events during development,
    571               it is recommended to set a breakpoint on the following instruction.
    572            */
    573           }
    574          #endif /* (STM8S903) || (STM8AF622x)*/
    575          
    576          /**
    577            * @brief Eeprom EEC Interrupt routine.
    578            * @param  None
    579            * @retval None
    580            */
    581          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    582          {
    583            /* In order to detect unexpected events during development,
    584               it is recommended to set a breakpoint on the following instruction.
    585            */
    586          }
    587          
    588          /**
    589            * @}
    590            */
    591          
    592          
    593          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     is_rev_flag                       2
     rev_num                           2
     rx_buf                           10
     tx_buf                           10
     i                                 2
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     raw_data                          4
     ad_data                           4
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                     288
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler       1
     TIM2_CAP_COM_IRQHandler           1
     j                                 2
     UART1_TX_IRQHandler              64
     sum                               2
     UART1_RX_IRQHandler             219
     I2C_IRQHandler                    1
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
  38 bytes in section .near.bss
 588 bytes in section .near_func.text
 
 588 bytes of CODE memory
  38 bytes of DATA memory

Errors: none
Warnings: none
