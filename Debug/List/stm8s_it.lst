###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM830/May/2019  22:02:36 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\Desktop\J19B_4E\USR\stm8s_it.c                        #
#    Command line =  E:\Desktop\J19B_4E\USR\stm8s_it.c -e -Ol --no_cse        #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o E:\Desktop\J19B_4E\Debug\Obj\ --dlib_config    #
#                    "D:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0 Evaluation\stm8\LIB\dlstm8smf.h" -lcN                #
#                    E:\Desktop\J19B_4E\Debug\List\ -lB                       #
#                    E:\Desktop\J19B_4E\Debug\List\ -I                        #
#                    E:\Desktop\J19B_4E\Lib\inc\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\led\ -I                           #
#                    E:\Desktop\J19B_4E\BSP\uart\ -I                          #
#                    E:\Desktop\J19B_4E\BSP\AD7798\ -I                        #
#                    E:\Desktop\J19B_4E\BSP\spi\ -I E:\Desktop\J19B_4E\USR\   #
#                    -I E:\Desktop\J19B_4E\BSP\delay\ -I                      #
#                    E:\Desktop\J19B_4E\BSP\tim1\ --vregs 16                  #
#    List file    =  E:\Desktop\J19B_4E\Debug\List\stm8s_it.lst               #
#    Object file  =  E:\Desktop\J19B_4E\Debug\Obj\stm8s_it.o                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\Desktop\J19B_4E\USR\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_it.c
      4            * @author  MCD Application Team
      5            * @version V2.2.0
      6            * @date    30-September-2014
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all peripherals interrupt service 
      9            *          routine.
     10             ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */ 
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm8s_it.h"
     32          #include "main.h"
     33          #define abs(x) ((x>0)?(x):(-x))
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          int is_rev_flag = 0;
     38          int rev_num = 0;
     39          uint8_t rx_buf[10];
     40          uint8_t tx_buf[10];
     41          int i = 0;
     42          #ifdef _COSMIC_
     43          /**
     44            * @brief Dummy Interrupt routine
     45            * @par Parameters:
     46            * None
     47            * @retval
     48            * None
     49          */
     50          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     51          {
     52            /* In order to detect unexpected events during development,
     53               it is recommended to set a breakpoint on the following instruction.
     54            */
     55          }
     56          #endif /*_COSMIC_*/
     57          
     58          /**
     59            * @brief TRAP Interrupt routine
     60            * @param  None
     61            * @retval None
     62            */
     63          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     64          {
     65            /* In order to detect unexpected events during development,
     66               it is recommended to set a breakpoint on the following instruction.
     67            */
     68          }
     69          
     70          /**
     71            * @brief Top Level Interrupt routine.
     72            * @param  None
     73            * @retval None
     74            */
     75          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     76          
     77          {
     78            /* In order to detect unexpected events during development,
     79               it is recommended to set a breakpoint on the following instruction.
     80            */
     81          }
     82          
     83          /**
     84            * @brief Auto Wake Up Interrupt routine.
     85            * @param  None
     86            * @retval None
     87            */
     88          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     89          {
     90            /* In order to detect unexpected events during development,
     91               it is recommended to set a breakpoint on the following instruction.
     92            */
     93          }
     94          
     95          /**
     96            * @brief Clock Controller Interrupt routine.
     97            * @param  None
     98            * @retval None
     99            */
    100          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    101          {
    102            /* In order to detect unexpected events during development,
    103               it is recommended to set a breakpoint on the following instruction.
    104            */
    105          }
    106          
    107          /**
    108            * @brief External Interrupt PORTA Interrupt routine.
    109            * @param  None
    110            * @retval None
    111            */
    112          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    113          {
    114            /* In order to detect unexpected events during development,
    115               it is recommended to set a breakpoint on the following instruction.
    116            */
    117          }
    118          
    119          /**
    120            * @brief External Interrupt PORTB Interrupt routine.
    121            * @param  None
    122            * @retval None
    123            */
    124          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    125          {
    126            /* In order to detect unexpected events during development,
    127               it is recommended to set a breakpoint on the following instruction.
    128            */
    129          }
    130          
    131          /**
    132            * @brief External Interrupt PORTC Interrupt routine.
    133            * @param  None
    134            * @retval None
    135            */
    136          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    137          {
    138            /* In order to detect unexpected events during development,
    139               it is recommended to set a breakpoint on the following instruction.
    140            */
    141          }
    142          
    143          /**
    144            * @brief External Interrupt PORTD Interrupt routine.
    145            * @param  None
    146            * @retval None
    147            */
    148          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    149          {
    150            /* In order to detect unexpected events during development,
    151               it is recommended to set a breakpoint on the following instruction.
    152            */
    153          }
    154          
    155          /**
    156            * @brief External Interrupt PORTE Interrupt routine.
    157            * @param  None
    158            * @retval None
    159            */
    160          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    161          {
    162            /* In order to detect unexpected events during development,
    163               it is recommended to set a breakpoint on the following instruction.
    164            */
    165          }
    166          
    167          #if defined (STM8S903) || defined (STM8AF622x) 
    168          /**
    169            * @brief External Interrupt PORTF Interrupt routine.
    170            * @param  None
    171            * @retval None
    172            */
    173           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    174           {
    175            /* In order to detect unexpected events during development,
    176               it is recommended to set a breakpoint on the following instruction.
    177            */
    178           }
    179          #endif /* (STM8S903) || (STM8AF622x) */
    180          
    181          #if defined (STM8S208) || defined (STM8AF52Ax)
    182          /**
    183            * @brief CAN RX Interrupt routine.
    184            * @param  None
    185            * @retval None
    186            */
    187           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    188           {
    189            /* In order to detect unexpected events during development,
    190               it is recommended to set a breakpoint on the following instruction.
    191            */
    192           }
    193          
    194          /**
    195            * @brief CAN TX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    200           {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204           }
    205          #endif /* (STM8S208) || (STM8AF52Ax) */
    206          
    207          /**
    208            * @brief SPI Interrupt routine.
    209            * @param  None
    210            * @retval None
    211            */
    212          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    213          {
    214            /* In order to detect unexpected events during development,
    215               it is recommended to set a breakpoint on the following instruction.
    216            */
    217          }
    218          
    219          /**
    220            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    221            * @param  None
    222            * @retval None
    223            */
    224            u32 raw_data;
    225            double ad_data;
    226          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    227          {
    228            GPIO_WriteReverse(GPIOB,(GPIO_Pin_TypeDef)GPIO_PIN_5);
    229            TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
    230            
    231            if (AD7798_Ready())
    232            {
    233              raw_data = AD7798_GetRegisterValue(AD7798_REG_DATA,3);
    234              ad_data = ((raw_data&0xFFFFFF)/8388608.0 - 1.0)*2.49;
    235            }
    236              ad_data = abs(ad_data);
    237              int sum = 0;
    238              tx_buf[0] = 0x5A;
    239              tx_buf[1] = 0xA5;
    240              tx_buf[2] = 0x04;
    241              tx_buf[3] = 0xAA;
    242              tx_buf[4] = 0x02;
    243              tx_buf[5] = ((uint16_t)(ad_data*1000))>>8 & 0xFF;
    244              tx_buf[6] = ((uint16_t)(ad_data*1000)) & 0xFF;
    245              sum = tx_buf[5]+tx_buf[6];
    246              tx_buf[7] = sum&0xFF;
    247              tx_buf[8] = 0xFF;
    248              tx_buf[9] = 0xFE;
    249              i = 0;
    250              GPIO_WriteHigh(GPIOA,(GPIO_Pin_TypeDef)GPIO_PIN_1);
    251              Delay_ms(100);
    252              UART1_ITConfig(UART1_IT_TXE, ENABLE);
    253              TIM1_ITConfig(TIM1_IT_UPDATE, DISABLE);
    254          }
    255          
    256          /**
    257            * @brief Timer1 Capture/Compare Interrupt routine.
    258            * @param  None
    259            * @retval None
    260            */
    261          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    262          {
    263            /* In order to detect unexpected events during development,
    264               it is recommended to set a breakpoint on the following instruction.
    265            */
    266          }
    267          
    268          #if defined (STM8S903) || defined (STM8AF622x)
    269          /**
    270            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    271            * @param  None
    272            * @retval None
    273            */
    274           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    275           {
    276            /* In order to detect unexpected events during development,
    277               it is recommended to set a breakpoint on the following instruction.
    278            */
    279           }
    280           
    281          /**
    282            * @brief Timer5 Capture/Compare Interrupt routine.
    283            * @param  None
    284            * @retval None
    285            */
    286           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    287           {
    288            /* In order to detect unexpected events during development,
    289               it is recommended to set a breakpoint on the following instruction.
    290            */
    291           }
    292          
    293          #else /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8S103) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    294          /**
    295            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    296            * @param  None
    297            * @retval None
    298            */
    299           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    300           {
    301            /* In order to detect unexpected events during development,
    302               it is recommended to set a breakpoint on the following instruction.
    303            */
    304           }
    305          
    306          /**
    307            * @brief Timer2 Capture/Compare Interrupt routine.
    308            * @param  None
    309            * @retval None
    310            */
    311           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    312           {
    313            /* In order to detect unexpected events during development,
    314               it is recommended to set a breakpoint on the following instruction.
    315            */
    316           }
    317          #endif /* (STM8S903) || (STM8AF622x) */
    318          
    319          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    320              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    321          /**
    322            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    323            * @param  None
    324            * @retval None
    325            */
    326           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    327           {
    328            /* In order to detect unexpected events during development,
    329               it is recommended to set a breakpoint on the following instruction.
    330            */
    331           }
    332          
    333          /**
    334            * @brief Timer3 Capture/Compare Interrupt routine.
    335            * @param  None
    336            * @retval None
    337            */
    338           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    339           {
    340            /* In order to detect unexpected events during development,
    341               it is recommended to set a breakpoint on the following instruction.
    342            */
    343           }
    344          #endif /* (STM8S208) || (STM8S207) || (STM8S105) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x) */
    345          
    346          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    347              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    348          /**
    349            * @brief UART1 TX Interrupt routine.
    350            * @param  None
    351            * @retval None
    352            */
    353          int j = 0;
    354           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    355           {
    356             if(j<10) UART1_SendData8(tx_buf[j++]);
    357             else 
    358             {
    359                GPIO_WriteLow(GPIOA,(GPIO_Pin_TypeDef)GPIO_PIN_1);
    360                UART1_ITConfig(UART1_IT_TXE, DISABLE);
    361                j = 0;
    362             }  
    363           }
    364          int sum = 0;
    365          
    366          /**
    367            * @brief UART1 RX Interrupt routine.
    368            * @param  None
    369            * @retval None
    370            */
    371           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    372           {
    373             char RxBuf;
    374             if(UART1_GetFlagStatus(UART1_FLAG_RXNE) != RESET)
    375             {
    376              UART1_ClearITPendingBit(UART1_IT_RXNE); 
    377              RxBuf = UART1_ReceiveData8();
    378              if(RxBuf == 0x5A && is_rev_flag == 0)
    379              {
    380                is_rev_flag = 1;
    381                return;
    382              }
    383              else if(is_rev_flag == 1 && RxBuf == 0xA5)
    384              {
    385                is_rev_flag = 2;
    386                return ;
    387              }
    388              else if(is_rev_flag == 2 && RxBuf == 0x04)
    389              { 
    390                 sum += RxBuf;
    391                 is_rev_flag = 3;
    392                 return;
    393              }
    394              else if(is_rev_flag == 3 && RxBuf == 0xAA)
    395              {
    396                sum += RxBuf;
    397                is_rev_flag = 4;
    398                return;
    399              }
    400              else if(is_rev_flag == 4)
    401              {
    402                if(sum == RxBuf)
    403                {
    404                  sum = 0;
    405                  is_rev_flag = 0;
    406                  TIM1_ITConfig(TIM1_IT_UPDATE, ENABLE); 
    407                  return;
    408                }else
    409                {
    410                  sum = 0;
    411                  is_rev_flag = 0;
    412                  return;
    413                }
    414              }else
    415              {
    416                sum = 0;
    417                is_rev_flag = 0;
    418                return ;
    419              }
    420             }
    421             if(UART1->SR & UART1_SR_OR)
    422             {
    423                (void)UART1->SR;
    424                (void)UART1->DR;
    425                 UART1_ClearITPendingBit(UART1_IT_OR); 
    426             }	
    427              return ;
    428           }
    429          #endif /* (STM8S208) || (STM8S207) || (STM8S103) || (STM8S903) || (STM8AF62Ax) || (STM8AF52Ax) */
    430          
    431          #if defined(STM8AF622x)
    432          /**
    433            * @brief UART4 TX Interrupt routine.
    434            * @param  None
    435            * @retval None
    436            */
    437           INTERRUPT_HANDLER(UART4_TX_IRQHandler, 17)
    438           {
    439              /* In order to detect unexpected events during development,
    440                 it is recommended to set a breakpoint on the following instruction.
    441              */
    442           }
    443          
    444          /**
    445            * @brief UART4 RX Interrupt routine.
    446            * @param  None
    447            * @retval None
    448            */
    449           INTERRUPT_HANDLER(UART4_RX_IRQHandler, 18)
    450           {
    451              /* In order to detect unexpected events during development,
    452                 it is recommended to set a breakpoint on the following instruction.
    453              */
    454           }
    455          #endif /* (STM8AF622x) */
    456          
    457          /**
    458            * @brief I2C Interrupt routine.
    459            * @param  None
    460            * @retval None
    461            */
    462          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    463          {
    464            /* In order to detect unexpected events during development,
    465               it is recommended to set a breakpoint on the following instruction.
    466            */
    467          }
    468          
    469          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    470          /**
    471            * @brief UART2 TX interrupt routine.
    472            * @param  None
    473            * @retval None
    474            */
    475           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    476           {
    477              /* In order to detect unexpected events during development,
    478                 it is recommended to set a breakpoint on the following instruction.
    479              */
    480           }
    481          
    482          /**
    483            * @brief UART2 RX interrupt routine.
    484            * @param  None
    485            * @retval None
    486            */
    487           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    488           {
    489              /* In order to detect unexpected events during development,
    490                 it is recommended to set a breakpoint on the following instruction.
    491              */
    492           }
    493          #endif /* (STM8S105) || (STM8AF626x) */
    494          
    495          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    496          /**
    497            * @brief UART3 TX interrupt routine.
    498            * @param  None
    499            * @retval None
    500            */
    501           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    502           {
    503              /* In order to detect unexpected events during development,
    504                 it is recommended to set a breakpoint on the following instruction.
    505              */
    506           }
    507          
    508          /**
    509            * @brief UART3 RX interrupt routine.
    510            * @param  None
    511            * @retval None
    512            */
    513           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    514           {
    515              /* In order to detect unexpected events during development,
    516                 it is recommended to set a breakpoint on the following instruction.
    517              */
    518           }
    519          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    520          
    521          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    522          /**
    523            * @brief ADC2 interrupt routine.
    524            * @param  None
    525            * @retval None
    526            */
    527           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    528           {
    529              /* In order to detect unexpected events during development,
    530                 it is recommended to set a breakpoint on the following instruction.
    531              */
    532           }
    533          #else /* STM8S105 or STM8S103 or STM8S903 or STM8AF626x or STM8AF622x */
    534          /**
    535            * @brief ADC1 interrupt routine.
    536            * @par Parameters:
    537            * None
    538            * @retval 
    539            * None
    540            */
    541           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    542           {
    543              /* In order to detect unexpected events during development,
    544                 it is recommended to set a breakpoint on the following instruction.
    545              */
    546           }
    547          #endif /* (STM8S208) || (STM8S207) || (STM8AF52Ax) || (STM8AF62Ax) */
    548          
    549          #if defined (STM8S903) || defined (STM8AF622x)
    550          /**
    551            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    552            * @param  None
    553            * @retval None
    554            */
    555          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    556           {
    557            /* In order to detect unexpected events during development,
    558               it is recommended to set a breakpoint on the following instruction.
    559            */
    560           }
    561          #else /* STM8S208 or STM8S207 or STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    562          /**
    563            * @brief Timer4 Update/Overflow Interrupt routine.
    564            * @param  None
    565            * @retval None
    566            */
    567           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    568           {
    569            /* In order to detect unexpected events during development,
    570               it is recommended to set a breakpoint on the following instruction.
    571            */
    572           }
    573          #endif /* (STM8S903) || (STM8AF622x)*/
    574          
    575          /**
    576            * @brief Eeprom EEC Interrupt routine.
    577            * @param  None
    578            * @retval None
    579            */
    580          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    581          {
    582            /* In order to detect unexpected events during development,
    583               it is recommended to set a breakpoint on the following instruction.
    584            */
    585          }
    586          
    587          /**
    588            * @}
    589            */
    590          
    591          
    592          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     is_rev_flag                       2
     rev_num                           2
     rx_buf                           10
     tx_buf                           10
     i                                 2
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     raw_data                          4
     ad_data                           4
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                     284
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler       1
     TIM2_CAP_COM_IRQHandler           1
     j                                 2
     UART1_TX_IRQHandler              64
     sum                               2
     UART1_RX_IRQHandler             219
     I2C_IRQHandler                    1
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
  38 bytes in section .near.bss
 584 bytes in section .near_func.text
 
 584 bytes of CODE memory
  38 bytes of DATA memory

Errors: none
Warnings: none
